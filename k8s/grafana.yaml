apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: secret-scanner
data:
  datasources.yaml: |
    apiVersion: 1

    deleteDatasources:
      - name: Tempo
        orgId: 1
      - name: Prometheus
        orgId: 1

    datasources:
      - name: Tempo
        type: tempo
        url: http://tempo:3200
        access: proxy
        jsonData:
          tracesToMetrics:
            datasourceUid: 'Prometheus'
            tags: [
              { key: 'k8s.pod.name', value: 'pod' },
              { key: 'k8s.namespace' },
              { key: 'service.name' }
            ]
            queries:
              - name: 'Scanner Tasks'
                query: 'sum(rate(scanner_tasks_dequeued_total[5m])) by (pod)'
              - name: 'Scanner Task Duration'
                query: 'rate(scanner_task_duration_seconds_sum[5m]) / rate(scanner_task_duration_seconds_count[5m])'
              - name: 'Scanner Task Errors'
                query: 'sum(rate(scanner_task_errors_total[5m])) by (pod)'
              - name: 'Controller Tasks'
                query: 'sum(rate(controller_tasks_enqueued_total[5m])) by (pod)'
          serviceMap:
            datasourceUid: 'Prometheus'
          nodeGraph:
            enabled: true
          search:
            hide: false
          spanBar:
            type: 'Tag'
            tag: 'k8s.pod.name'
        version: 1
        editable: true

      - name: Prometheus
        type: prometheus
        url: http://prometheus:9090
        access: proxy
        jsonData:
          httpMethod: POST
          prometheusType: Prometheus
          prometheusVersion: 2.44.0
          exemplarTraceIdDestinations:
            - name: trace_id
              datasourceUid: Tempo
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: secret-scanner
  labels:
    app: grafana
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
    spec:
      containers:
        - name: grafana
          image: grafana/grafana:11.3.0
          ports:
            - containerPort: 3000
              name: http-grafana
          env:
            - name: GF_FEATURE_TOGGLES_ENABLE
              value: "traceqlEditor"
            - name: GF_AUTH_ANONYMOUS_ENABLED
              value: "true"
            - name: GF_AUTH_ANONYMOUS_ORG_ROLE
              value: "Admin"
            - name: GF_AUTH_DISABLE_LOGIN_FORM
              value: "true"
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 10
            timeoutSeconds: 2
          livenessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 30
            timeoutSeconds: 2
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 512Mi
          volumeMounts:
            - name: datasources
              mountPath: /etc/grafana/provisioning/datasources
      volumes:
        - name: datasources
          configMap:
            name: grafana-datasources
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: secret-scanner
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: http-grafana
      protocol: TCP
      name: http
  selector:
    app: grafana
