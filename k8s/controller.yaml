apiVersion: apps/v1
kind: Deployment
metadata:
  name: scanner-controller
  namespace: secret-scanner
  labels:
    app: scanner-controller
spec:
  replicas: 3
  selector:
    matchLabels:
      app: scanner-controller
  template:
    metadata:
      labels:
        app: scanner-controller
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/path: "/metrics"
        prometheus.io/port: "8081"
        prometheus.io/scheme: "http"
    spec:
      serviceAccountName: secret-scanner-sa
      containers:
      - name: controller
        image: controller:latest
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8080
          name: health
        - containerPort: 8081
          name: metrics
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: KAFKA_TASK_TOPIC
          valueFrom:
            configMapKeyRef:
              name: scanner-config
              key: KAFKA_TASK_TOPIC
        - name: KAFKA_RESULTS_TOPIC
          valueFrom:
            configMapKeyRef:
              name: scanner-config
              key: KAFKA_RESULTS_TOPIC
        - name: KAFKA_RULES_TOPIC
          valueFrom:
            configMapKeyRef:
              name: scanner-config
              key: KAFKA_RULES_TOPIC
        - name: KAFKA_BROKERS
          valueFrom:
            configMapKeyRef:
              name: scanner-config
              key: KAFKA_BROKERS
        - name: KAFKA_GROUP_ID
          value: "controller-workers"
        - name: POSTGRES_USER
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          value: postgres
        - name: POSTGRES_HOST
          value: postgres
        - name: POSTGRES_DB
          valueFrom:
            configMapKeyRef:
              name: postgres-config
              key: POSTGRES_DB
        - name: TEMPO_HOST
          valueFrom:
            configMapKeyRef:
              name: scanner-config
              key: TEMPO_HOST
        - name: TEMPO_SERVICE_NAME
          value: "scanner-controller"
        - name: TEMPO_PROBABILITY
          valueFrom:
            configMapKeyRef:
              name: scanner-config
              key: TEMPO_PROBABILITY
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
          limits:
            memory: "512Mi"
            cpu: "400m"
        readinessProbe:
          httpGet:
            path: /v1/readiness
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 2
        livenessProbe:
          httpGet:
            path: /v1/health
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 20
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 3
        volumeMounts:
        - name: scanner-config
          mountPath: /etc/scanner/config
          readOnly: true
      volumes:
      - name: scanner-config
        secret:
          secretName: scanner-targets
      initContainers:
      - name: wait-for-kafka
        image: busybox:1.28
        command: ['sh', '-c', 'until nc -z kafka 9092; do echo waiting for kafka; sleep 2; done;']
      - name: wait-for-postgres
        image: busybox:1.28
        command: ['sh', '-c', 'until nc -z postgres 5432; do echo waiting for postgres; sleep 2; done;']
---
apiVersion: v1
kind: Service
metadata:
  name: scanner-controller
  namespace: secret-scanner
  labels:
    app: scanner-controller
spec:
  type: ClusterIP
  selector:
    app: scanner-controller
  ports:
  - port: 8080
    targetPort: health
    name: health
  - port: 8081
    targetPort: metrics
    name: metrics
