// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.0
// source: proto/gateway.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ScannerGatewayService_ConnectScanner_FullMethodName        = "/scanner.ScannerGatewayService/ConnectScanner"
	ScannerGatewayService_SubscribeToBroadcasts_FullMethodName = "/scanner.ScannerGatewayService/SubscribeToBroadcasts"
)

// ScannerGatewayServiceClient is the client API for ScannerGatewayService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ScannerGatewayService provides a bidirectional streaming interface for
// external scanner instances to communicate with the central scanning system
// without direct access to the Kafka infrastructure.
type ScannerGatewayServiceClient interface {
	// ConnectScanner establishes a bidirectional stream between an external
	// scanner and the gateway for regular scanner-specific communication.
	// The scanner sends initialization data, followed by a stream of events
	// (results, heartbeats, etc.) The gateway sends tasks and control messages
	// back to the scanner.
	ConnectScanner(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ScannerToGatewayMessage, GatewayToScannerMessage], error)
	// SubscribeToBroadcasts establishes a separate stream specifically for
	// receiving broadcast events that should be delivered to all scanners.
	// This is used for system-wide notifications and job control events that
	// all scanners should process regardless of their consumer group.
	SubscribeToBroadcasts(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ScannerToGatewayMessage, GatewayToScannerMessage], error)
}

type scannerGatewayServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewScannerGatewayServiceClient(cc grpc.ClientConnInterface) ScannerGatewayServiceClient {
	return &scannerGatewayServiceClient{cc}
}

func (c *scannerGatewayServiceClient) ConnectScanner(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ScannerToGatewayMessage, GatewayToScannerMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ScannerGatewayService_ServiceDesc.Streams[0], ScannerGatewayService_ConnectScanner_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ScannerToGatewayMessage, GatewayToScannerMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ScannerGatewayService_ConnectScannerClient = grpc.BidiStreamingClient[ScannerToGatewayMessage, GatewayToScannerMessage]

func (c *scannerGatewayServiceClient) SubscribeToBroadcasts(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ScannerToGatewayMessage, GatewayToScannerMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ScannerGatewayService_ServiceDesc.Streams[1], ScannerGatewayService_SubscribeToBroadcasts_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ScannerToGatewayMessage, GatewayToScannerMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ScannerGatewayService_SubscribeToBroadcastsClient = grpc.BidiStreamingClient[ScannerToGatewayMessage, GatewayToScannerMessage]

// ScannerGatewayServiceServer is the server API for ScannerGatewayService service.
// All implementations must embed UnimplementedScannerGatewayServiceServer
// for forward compatibility.
//
// ScannerGatewayService provides a bidirectional streaming interface for
// external scanner instances to communicate with the central scanning system
// without direct access to the Kafka infrastructure.
type ScannerGatewayServiceServer interface {
	// ConnectScanner establishes a bidirectional stream between an external
	// scanner and the gateway for regular scanner-specific communication.
	// The scanner sends initialization data, followed by a stream of events
	// (results, heartbeats, etc.) The gateway sends tasks and control messages
	// back to the scanner.
	ConnectScanner(grpc.BidiStreamingServer[ScannerToGatewayMessage, GatewayToScannerMessage]) error
	// SubscribeToBroadcasts establishes a separate stream specifically for
	// receiving broadcast events that should be delivered to all scanners.
	// This is used for system-wide notifications and job control events that
	// all scanners should process regardless of their consumer group.
	SubscribeToBroadcasts(grpc.BidiStreamingServer[ScannerToGatewayMessage, GatewayToScannerMessage]) error
	mustEmbedUnimplementedScannerGatewayServiceServer()
}

// UnimplementedScannerGatewayServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedScannerGatewayServiceServer struct{}

func (UnimplementedScannerGatewayServiceServer) ConnectScanner(grpc.BidiStreamingServer[ScannerToGatewayMessage, GatewayToScannerMessage]) error {
	return status.Errorf(codes.Unimplemented, "method ConnectScanner not implemented")
}
func (UnimplementedScannerGatewayServiceServer) SubscribeToBroadcasts(grpc.BidiStreamingServer[ScannerToGatewayMessage, GatewayToScannerMessage]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeToBroadcasts not implemented")
}
func (UnimplementedScannerGatewayServiceServer) mustEmbedUnimplementedScannerGatewayServiceServer() {}
func (UnimplementedScannerGatewayServiceServer) testEmbeddedByValue()                               {}

// UnsafeScannerGatewayServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ScannerGatewayServiceServer will
// result in compilation errors.
type UnsafeScannerGatewayServiceServer interface {
	mustEmbedUnimplementedScannerGatewayServiceServer()
}

func RegisterScannerGatewayServiceServer(s grpc.ServiceRegistrar, srv ScannerGatewayServiceServer) {
	// If the following call pancis, it indicates UnimplementedScannerGatewayServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ScannerGatewayService_ServiceDesc, srv)
}

func _ScannerGatewayService_ConnectScanner_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ScannerGatewayServiceServer).ConnectScanner(&grpc.GenericServerStream[ScannerToGatewayMessage, GatewayToScannerMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ScannerGatewayService_ConnectScannerServer = grpc.BidiStreamingServer[ScannerToGatewayMessage, GatewayToScannerMessage]

func _ScannerGatewayService_SubscribeToBroadcasts_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ScannerGatewayServiceServer).SubscribeToBroadcasts(&grpc.GenericServerStream[ScannerToGatewayMessage, GatewayToScannerMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ScannerGatewayService_SubscribeToBroadcastsServer = grpc.BidiStreamingServer[ScannerToGatewayMessage, GatewayToScannerMessage]

// ScannerGatewayService_ServiceDesc is the grpc.ServiceDesc for ScannerGatewayService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ScannerGatewayService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "scanner.ScannerGatewayService",
	HandlerType: (*ScannerGatewayServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ConnectScanner",
			Handler:       _ScannerGatewayService_ConnectScanner_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SubscribeToBroadcasts",
			Handler:       _ScannerGatewayService_SubscribeToBroadcasts_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/gateway.proto",
}
