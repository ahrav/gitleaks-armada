syntax = "proto3";

package scanner;

import "google/protobuf/struct.proto";
import "proto/shared.proto";

option go_package = "github.com/ahrav/gitleaks-armada/proto;proto";

// The final outcome of a scan, containing all discovered findings, status, etc.
message ScanResult {
  // Ties back to the ScanTask this result belongs to.
  string task_id = 1;
  // All secrets or matches found during this scan.
  repeated Finding findings = 2;
  // Status of this job, matching your DB enum.
  ScanJobStatus status = 3;
  // If status == SCAN_JOB_STATUS_FAILED, short error info here.
  string error = 4;
}

// A single discovered secret or match, typically stored in your DB 'findings'
// table.
message Finding {
  // A unique key for deduplication (e.g., hash of path + secret).
  string fingerprint = 1;
  // The path or location of the found secret (universal).
  string file_path = 2;
  // Line number if relevant (e.g., scanning code).
  int32 line_number = 3;
  // Entire line of text, if captured. (Optional but convenient.)
  string line = 4;
  // The actual match that was found.
  string match = 5;
  // The author's email address.
  string author_email = 6;
  // For ephemeral or extended data: commit hash, message, etc.
  google.protobuf.Struct raw_finding = 7;
}

enum ScanJobStatus {
  SCAN_JOB_STATUS_UNSPECIFIED = 0;
  SCAN_JOB_STATUS_QUEUED = 1;
  SCAN_JOB_STATUS_ENUMERATING = 2;
  SCAN_JOB_STATUS_RUNNING = 3;
  SCAN_JOB_STATUS_PAUSING = 4;
  SCAN_JOB_STATUS_PAUSED = 5;
  SCAN_JOB_STATUS_COMPLETED = 6;
  SCAN_JOB_STATUS_CANCELLING = 7;
  SCAN_JOB_STATUS_CANCELLED = 8;
  SCAN_JOB_STATUS_FAILED = 9;
}

enum TaskStatus {
  TASK_STATUS_UNSPECIFIED = 0;
  TASK_STATUS_PENDING = 1;
  TASK_STATUS_IN_PROGRESS = 2;
  TASK_STATUS_COMPLETED = 3;
  TASK_STATUS_FAILED = 4;
  TASK_STATUS_STALE = 5;
  TASK_STATUS_PAUSED = 6;
  TASK_STATUS_CANCELLED = 7;
}

// JobRequestedEvent represents a request to create a new scan job.
message JobRequestedEvent {
  string job_id = 1;
  int64 occurred_at = 2;
  repeated shared.TargetSpec targets = 3;
  string requested_by = 4;
}

// JobCreatedEvent represents the creation of a new scan job.
message JobCreatedEvent {
  string job_id = 1;
  int64 timestamp = 2;
  shared.TargetSpec target_spec = 3;
}

// JobEnumerationCompletedEvent signals that all targets for a job have been
// enumerated.
message JobEnumerationCompletedEvent {
  string job_id = 1;
  int64 timestamp = 2;
  int32 total_tasks = 3;
}

// JobPausingEvent signals that a job is in the process of being paused.
message JobPausingEvent {
  string job_id = 1;
  int64 timestamp = 2;
  string requested_by = 3;
}

// JobPausedEvent signals that a job has been successfully paused.
message JobPausedEvent {
  string job_id = 1;
  int64 timestamp = 2;
  int64 paused_at = 3;
  string reason = 4;
  string requested_by = 5;
}

// JobResumingEvent signals that a job is in the process of being resumed.
message JobResumingEvent {
  string job_id = 1;
  int64 timestamp = 2;
  string requested_by = 3;
}

// JobCancellingEvent signals that a job is in the process of being cancelled.
message JobCancellingEvent {
  string job_id = 1;
  int64 timestamp = 2;
  string requested_by = 3;
}

// JobCancelledEvent signals that a job has been successfully cancelled.
message JobCancelledEvent {
  string job_id = 1;
  int64 timestamp = 2;
  int64 cancelled_at = 3;
  string reason = 4;
  string requested_by = 5;
}

// TaskCreatedEvent represents a new task discovered for scanning.
message TaskCreatedEvent {
  string job_id = 1;
  string task_id = 2;
  shared.SourceType source_type = 3;
  string resource_uri = 4;
  map<string, string> metadata = 5;
  shared.Auth auth = 6;
  int64 timestamp = 7;
}

message TaskStartedEvent {
  string job_id = 1;
  string task_id = 2;
  string resource_uri = 3;
  int64 timestamp = 4; // Unix timestamp in nanoseconds
}

message TaskProgressedEvent {
  string task_id = 1;
  string job_id = 2;
  int64 sequence_num = 3;
  int64 timestamp = 4;
  int64 items_processed = 5;
  int32 error_count = 6;
  string message = 7;
  bytes progress_details = 8;
  Checkpoint checkpoint = 9;
}

message Checkpoint {
  string task_id = 1;
  int64 timestamp = 2;
  bytes resume_token = 3;
  map<string, string> metadata = 4;
}

message TaskCompletedEvent {
  string job_id = 1;
  string task_id = 2;
  int64 timestamp = 3;
}

message TaskFailedEvent {
  string job_id = 1;
  string task_id = 2;
  int64 timestamp = 3;
  string reason = 4;
}

message TaskHeartbeatEvent {
  string task_id = 1;
  int64 timestamp = 2;
}

message TaskResumeEvent {
  string job_id = 1;
  string task_id = 2;
  shared.SourceType source_type = 3;
  int64 timestamp = 4;
  string resource_uri = 5;
  int64 sequence_num = 6;
  Checkpoint checkpoint = 7;
  shared.Auth auth = 8;
}

message TaskJobMetricEvent {
  string job_id = 1;
  string task_id = 2;
  TaskStatus status = 3;
  int64 timestamp = 4;
}

message TaskPausedEvent {
  string job_id = 1;
  string task_id = 2;
  int64 timestamp = 3;
  string requested_by = 4;
  TaskProgressedEvent progress = 5;
}

message TaskCancelledEvent {
  string job_id = 1;
  string task_id = 2;
  int64 timestamp = 3;
  string requested_by = 4;
  int64 cancelled_at = 5;
}

// ScannerStatus represents the possible states of a scanner in the system.
enum ScannerStatus {
  SCANNER_STATUS_UNSPECIFIED = 0;
  SCANNER_STATUS_ONLINE = 1;  // Scanner is connected and ready to accept tasks
  SCANNER_STATUS_OFFLINE = 2; // Scanner is not connected or has timed out
  SCANNER_STATUS_MAINTENANCE =
      3; // Scanner is online but not accepting tasks (maintenance mode)
  SCANNER_STATUS_ERROR = 4; // Scanner is in an error state
}

// ScannerRegisteredEvent is emitted when a scanner registers with the system.
message ScannerRegisteredEvent {
  string scanner_id = 1;
  string name = 2;
  string version = 3;
  repeated string capabilities = 4;
  string group_name = 5; // Optional: if not provided, assigned to default group
  string hostname = 6;
  string ip_address = 7;
  int64 timestamp = 8; // Unix timestamp in nanoseconds
  map<string, string> tags = 9;
  ScannerStatus initial_status = 10; // Initial status of the scanner
}

// ScannerHeartbeatEvent is emitted periodically by scanners to indicate they're
// still alive.
message ScannerHeartbeatEvent {
  string scanner_id = 1;
  ScannerStatus status = 2; // Current status: online, busy, etc.
  int64 timestamp = 3;      // Unix timestamp in nanoseconds
  map<string, double> metrics =
      4; // Optional metrics about scanner health/performance
}

// ScannerStatusChangedEvent is emitted when a scanner's status changes.
message ScannerStatusChangedEvent {
  string scanner_id = 1;
  ScannerStatus new_status =
      2; // "online", "offline", "maintenance", "error", "unknown"
  ScannerStatus previous_status = 3;
  string reason = 4;   // Reason for the status change
  int64 timestamp = 5; // Unix timestamp in nanoseconds
}

// ScannerDeregisteredEvent is emitted when a scanner gracefully deregisters
// from the system.
message ScannerDeregisteredEvent {
  string scanner_id = 1;
  string reason = 2;
  int64 timestamp = 3; // Unix timestamp in nanoseconds
}
