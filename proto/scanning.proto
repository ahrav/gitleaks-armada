syntax = "proto3";

package scanner;

import "google/protobuf/struct.proto";

option go_package = "github.com/ahrav/gitleaks-armada/proto;proto";

// The final outcome of a scan, containing all discovered findings, status, etc.
message ScanResult {
  // Ties back to the ScanTask this result belongs to.
  string task_id = 1;
  // All secrets or matches found during this scan.
  repeated Finding findings = 2;
  // Status of this job, matching your DB enum.
  ScanJobStatus status = 3;
  // If status == SCAN_JOB_STATUS_FAILED, short error info here.
  string error = 4;
}

// A single discovered secret or match, typically stored in your DB 'findings'
// table.
message Finding {
  // A unique key for deduplication (e.g., hash of path + secret).
  string fingerprint = 1;
  // The path or location of the found secret (universal).
  string file_path = 2;
  // Line number if relevant (e.g., scanning code).
  int32 line_number = 3;
  // Entire line of text, if captured. (Optional but convenient.)
  string line = 4;
  // The actual match that was found.
  string match = 5;
  // The author's email address.
  string author_email = 6;
  // For ephemeral or extended data: commit hash, message, etc.
  google.protobuf.Struct raw_finding = 7;
}

enum ScanJobStatus {
  SCAN_JOB_STATUS_UNSPECIFIED = 0;
  SCAN_JOB_STATUS_QUEUED = 1;
  SCAN_JOB_STATUS_RUNNING = 2;
  SCAN_JOB_STATUS_COMPLETED = 3;
  SCAN_JOB_STATUS_FAILED = 4;
}

enum TaskStatus {
  TASK_STATUS_UNSPECIFIED = 0;
  TASK_STATUS_IN_PROGRESS = 1;
  TASK_STATUS_COMPLETED = 2;
  TASK_STATUS_FAILED = 3;
}

message TaskStartedEvent {
  string job_id = 1;
  string task_id = 2;
  string resource_uri = 3;
  int64 timestamp = 4; // Unix timestamp in nanoseconds
}

message TaskProgressedEvent {
  string task_id = 1;
  int64 sequence_num = 2;
  int64 timestamp = 3;
  int64 items_processed = 4;
  int32 error_count = 5;
  string message = 6;
  bytes progress_details = 7;
  Checkpoint checkpoint = 8;
}

message Checkpoint {
  string task_id = 1;
  int64 timestamp = 2;
  bytes resume_token = 3;
  map<string, string> metadata = 4;
}

message TaskCompletedEvent {
  string job_id = 1;
  string task_id = 2;
  int64 timestamp = 3;
}

message TaskFailedEvent {
  string job_id = 1;
  string task_id = 2;
  int64 timestamp = 3;
  string reason = 4;
}

message TaskHeartbeatEvent {
  string task_id = 1;
  int64 timestamp = 2;
}

message TaskResumeEvent {
  string job_id = 1;
  string task_id = 2;
  int64 timestamp = 3;
  string resource_uri = 4;
  int64 sequence_num = 5;
  Checkpoint checkpoint = 6;
}
