// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v5.29.0
// source: proto/gateway.proto

package proto

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SystemNotification_NotificationType int32

const (
	SystemNotification_NOTIFICATION_TYPE_UNSPECIFIED SystemNotification_NotificationType = 0
	SystemNotification_NOTIFICATION_TYPE_INFO        SystemNotification_NotificationType = 1
	SystemNotification_NOTIFICATION_TYPE_WARNING     SystemNotification_NotificationType = 2
	SystemNotification_NOTIFICATION_TYPE_ERROR       SystemNotification_NotificationType = 3
	SystemNotification_NOTIFICATION_TYPE_MAINTENANCE SystemNotification_NotificationType = 4
)

// Enum value maps for SystemNotification_NotificationType.
var (
	SystemNotification_NotificationType_name = map[int32]string{
		0: "NOTIFICATION_TYPE_UNSPECIFIED",
		1: "NOTIFICATION_TYPE_INFO",
		2: "NOTIFICATION_TYPE_WARNING",
		3: "NOTIFICATION_TYPE_ERROR",
		4: "NOTIFICATION_TYPE_MAINTENANCE",
	}
	SystemNotification_NotificationType_value = map[string]int32{
		"NOTIFICATION_TYPE_UNSPECIFIED": 0,
		"NOTIFICATION_TYPE_INFO":        1,
		"NOTIFICATION_TYPE_WARNING":     2,
		"NOTIFICATION_TYPE_ERROR":       3,
		"NOTIFICATION_TYPE_MAINTENANCE": 4,
	}
)

func (x SystemNotification_NotificationType) Enum() *SystemNotification_NotificationType {
	p := new(SystemNotification_NotificationType)
	*p = x
	return p
}

func (x SystemNotification_NotificationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SystemNotification_NotificationType) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_gateway_proto_enumTypes[0].Descriptor()
}

func (SystemNotification_NotificationType) Type() protoreflect.EnumType {
	return &file_proto_gateway_proto_enumTypes[0]
}

func (x SystemNotification_NotificationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SystemNotification_NotificationType.Descriptor instead.
func (SystemNotification_NotificationType) EnumDescriptor() ([]byte, []int) {
	return file_proto_gateway_proto_rawDescGZIP(), []int{3, 0}
}

// ScannerToGatewayMessage is a container for all possible messages a scanner
// can send to the gateway. This wraps domain events to provide metadata for the
// gRPC transport.
//
// Field numbering strategy:
// 1-9:   Common message metadata fields
// 10-19: Scanner lifecycle events
// 20-29: Task processing events
// 30-39: Scan results and findings
// 40-49: Control messages (acknowledgments, etc.)
// 50-59: Rules-related events
type ScannerToGatewayMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for this message.
	MessageId string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// Timestamp when the message was created (Unix timestamp in nanoseconds).
	Timestamp int64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Authentication token to verify scanner identity.
	AuthToken string `protobuf:"bytes,3,opt,name=auth_token,json=authToken,proto3" json:"auth_token,omitempty"`
	// Sender scanner ID.
	ScannerId string `protobuf:"bytes,4,opt,name=scanner_id,json=scannerId,proto3" json:"scanner_id,omitempty"`
	// Routing key for the message (used for consistent routing).
	// This ensures messages with the same key are processed by the same consumer.
	RoutingKey string `protobuf:"bytes,5,opt,name=routing_key,json=routingKey,proto3" json:"routing_key,omitempty"`
	// Headers provide additional metadata for the message.
	// These can include tracing IDs, tenant information, etc.
	Headers map[string]string `protobuf:"bytes,6,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The actual payload containing domain events.
	//
	// Types that are assignable to Payload:
	//
	//	*ScannerToGatewayMessage_Registration
	//	*ScannerToGatewayMessage_ScannerRegistered
	//	*ScannerToGatewayMessage_Heartbeat
	//	*ScannerToGatewayMessage_StatusChanged
	//	*ScannerToGatewayMessage_Deregistered
	//	*ScannerToGatewayMessage_TaskStarted
	//	*ScannerToGatewayMessage_TaskProgressed
	//	*ScannerToGatewayMessage_TaskCompleted
	//	*ScannerToGatewayMessage_TaskFailed
	//	*ScannerToGatewayMessage_TaskPaused
	//	*ScannerToGatewayMessage_TaskCancelled
	//	*ScannerToGatewayMessage_TaskJobMetric
	//	*ScannerToGatewayMessage_TaskHeartbeat
	//	*ScannerToGatewayMessage_RuleMessage
	//	*ScannerToGatewayMessage_Ack
	Payload isScannerToGatewayMessage_Payload `protobuf_oneof:"payload"`
}

func (x *ScannerToGatewayMessage) Reset() {
	*x = ScannerToGatewayMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScannerToGatewayMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScannerToGatewayMessage) ProtoMessage() {}

func (x *ScannerToGatewayMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScannerToGatewayMessage.ProtoReflect.Descriptor instead.
func (*ScannerToGatewayMessage) Descriptor() ([]byte, []int) {
	return file_proto_gateway_proto_rawDescGZIP(), []int{0}
}

func (x *ScannerToGatewayMessage) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *ScannerToGatewayMessage) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *ScannerToGatewayMessage) GetAuthToken() string {
	if x != nil {
		return x.AuthToken
	}
	return ""
}

func (x *ScannerToGatewayMessage) GetScannerId() string {
	if x != nil {
		return x.ScannerId
	}
	return ""
}

func (x *ScannerToGatewayMessage) GetRoutingKey() string {
	if x != nil {
		return x.RoutingKey
	}
	return ""
}

func (x *ScannerToGatewayMessage) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (m *ScannerToGatewayMessage) GetPayload() isScannerToGatewayMessage_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *ScannerToGatewayMessage) GetRegistration() *ScannerRegistrationRequest {
	if x, ok := x.GetPayload().(*ScannerToGatewayMessage_Registration); ok {
		return x.Registration
	}
	return nil
}

func (x *ScannerToGatewayMessage) GetScannerRegistered() *ScannerRegisteredEvent {
	if x, ok := x.GetPayload().(*ScannerToGatewayMessage_ScannerRegistered); ok {
		return x.ScannerRegistered
	}
	return nil
}

func (x *ScannerToGatewayMessage) GetHeartbeat() *ScannerHeartbeatEvent {
	if x, ok := x.GetPayload().(*ScannerToGatewayMessage_Heartbeat); ok {
		return x.Heartbeat
	}
	return nil
}

func (x *ScannerToGatewayMessage) GetStatusChanged() *ScannerStatusChangedEvent {
	if x, ok := x.GetPayload().(*ScannerToGatewayMessage_StatusChanged); ok {
		return x.StatusChanged
	}
	return nil
}

func (x *ScannerToGatewayMessage) GetDeregistered() *ScannerDeregisteredEvent {
	if x, ok := x.GetPayload().(*ScannerToGatewayMessage_Deregistered); ok {
		return x.Deregistered
	}
	return nil
}

func (x *ScannerToGatewayMessage) GetTaskStarted() *TaskStartedEvent {
	if x, ok := x.GetPayload().(*ScannerToGatewayMessage_TaskStarted); ok {
		return x.TaskStarted
	}
	return nil
}

func (x *ScannerToGatewayMessage) GetTaskProgressed() *TaskProgressedEvent {
	if x, ok := x.GetPayload().(*ScannerToGatewayMessage_TaskProgressed); ok {
		return x.TaskProgressed
	}
	return nil
}

func (x *ScannerToGatewayMessage) GetTaskCompleted() *TaskCompletedEvent {
	if x, ok := x.GetPayload().(*ScannerToGatewayMessage_TaskCompleted); ok {
		return x.TaskCompleted
	}
	return nil
}

func (x *ScannerToGatewayMessage) GetTaskFailed() *TaskFailedEvent {
	if x, ok := x.GetPayload().(*ScannerToGatewayMessage_TaskFailed); ok {
		return x.TaskFailed
	}
	return nil
}

func (x *ScannerToGatewayMessage) GetTaskPaused() *TaskPausedEvent {
	if x, ok := x.GetPayload().(*ScannerToGatewayMessage_TaskPaused); ok {
		return x.TaskPaused
	}
	return nil
}

func (x *ScannerToGatewayMessage) GetTaskCancelled() *TaskCancelledEvent {
	if x, ok := x.GetPayload().(*ScannerToGatewayMessage_TaskCancelled); ok {
		return x.TaskCancelled
	}
	return nil
}

func (x *ScannerToGatewayMessage) GetTaskJobMetric() *TaskJobMetricEvent {
	if x, ok := x.GetPayload().(*ScannerToGatewayMessage_TaskJobMetric); ok {
		return x.TaskJobMetric
	}
	return nil
}

func (x *ScannerToGatewayMessage) GetTaskHeartbeat() *TaskHeartbeatEvent {
	if x, ok := x.GetPayload().(*ScannerToGatewayMessage_TaskHeartbeat); ok {
		return x.TaskHeartbeat
	}
	return nil
}

func (x *ScannerToGatewayMessage) GetRuleMessage() *RuleMessage {
	if x, ok := x.GetPayload().(*ScannerToGatewayMessage_RuleMessage); ok {
		return x.RuleMessage
	}
	return nil
}

func (x *ScannerToGatewayMessage) GetAck() *MessageAcknowledgment {
	if x, ok := x.GetPayload().(*ScannerToGatewayMessage_Ack); ok {
		return x.Ack
	}
	return nil
}

type isScannerToGatewayMessage_Payload interface {
	isScannerToGatewayMessage_Payload()
}

type ScannerToGatewayMessage_Registration struct {
	// Scanner lifecycle events.
	Registration *ScannerRegistrationRequest `protobuf:"bytes,10,opt,name=registration,proto3,oneof"`
}

type ScannerToGatewayMessage_ScannerRegistered struct {
	ScannerRegistered *ScannerRegisteredEvent `protobuf:"bytes,11,opt,name=scanner_registered,json=scannerRegistered,proto3,oneof"`
}

type ScannerToGatewayMessage_Heartbeat struct {
	Heartbeat *ScannerHeartbeatEvent `protobuf:"bytes,12,opt,name=heartbeat,proto3,oneof"`
}

type ScannerToGatewayMessage_StatusChanged struct {
	StatusChanged *ScannerStatusChangedEvent `protobuf:"bytes,13,opt,name=status_changed,json=statusChanged,proto3,oneof"`
}

type ScannerToGatewayMessage_Deregistered struct {
	Deregistered *ScannerDeregisteredEvent `protobuf:"bytes,14,opt,name=deregistered,proto3,oneof"`
}

type ScannerToGatewayMessage_TaskStarted struct {
	// Task processing events.
	TaskStarted *TaskStartedEvent `protobuf:"bytes,20,opt,name=task_started,json=taskStarted,proto3,oneof"`
}

type ScannerToGatewayMessage_TaskProgressed struct {
	TaskProgressed *TaskProgressedEvent `protobuf:"bytes,21,opt,name=task_progressed,json=taskProgressed,proto3,oneof"`
}

type ScannerToGatewayMessage_TaskCompleted struct {
	TaskCompleted *TaskCompletedEvent `protobuf:"bytes,22,opt,name=task_completed,json=taskCompleted,proto3,oneof"`
}

type ScannerToGatewayMessage_TaskFailed struct {
	TaskFailed *TaskFailedEvent `protobuf:"bytes,23,opt,name=task_failed,json=taskFailed,proto3,oneof"`
}

type ScannerToGatewayMessage_TaskPaused struct {
	TaskPaused *TaskPausedEvent `protobuf:"bytes,24,opt,name=task_paused,json=taskPaused,proto3,oneof"`
}

type ScannerToGatewayMessage_TaskCancelled struct {
	TaskCancelled *TaskCancelledEvent `protobuf:"bytes,25,opt,name=task_cancelled,json=taskCancelled,proto3,oneof"`
}

type ScannerToGatewayMessage_TaskJobMetric struct {
	TaskJobMetric *TaskJobMetricEvent `protobuf:"bytes,26,opt,name=task_job_metric,json=taskJobMetric,proto3,oneof"`
}

type ScannerToGatewayMessage_TaskHeartbeat struct {
	TaskHeartbeat *TaskHeartbeatEvent `protobuf:"bytes,27,opt,name=task_heartbeat,json=taskHeartbeat,proto3,oneof"`
}

type ScannerToGatewayMessage_RuleMessage struct {
	// Rules-related events.
	RuleMessage *RuleMessage `protobuf:"bytes,30,opt,name=rule_message,json=ruleMessage,proto3,oneof"`
}

type ScannerToGatewayMessage_Ack struct {
	// Acknowledgments of received messages.
	Ack *MessageAcknowledgment `protobuf:"bytes,40,opt,name=ack,proto3,oneof"`
}

func (*ScannerToGatewayMessage_Registration) isScannerToGatewayMessage_Payload() {}

func (*ScannerToGatewayMessage_ScannerRegistered) isScannerToGatewayMessage_Payload() {}

func (*ScannerToGatewayMessage_Heartbeat) isScannerToGatewayMessage_Payload() {}

func (*ScannerToGatewayMessage_StatusChanged) isScannerToGatewayMessage_Payload() {}

func (*ScannerToGatewayMessage_Deregistered) isScannerToGatewayMessage_Payload() {}

func (*ScannerToGatewayMessage_TaskStarted) isScannerToGatewayMessage_Payload() {}

func (*ScannerToGatewayMessage_TaskProgressed) isScannerToGatewayMessage_Payload() {}

func (*ScannerToGatewayMessage_TaskCompleted) isScannerToGatewayMessage_Payload() {}

func (*ScannerToGatewayMessage_TaskFailed) isScannerToGatewayMessage_Payload() {}

func (*ScannerToGatewayMessage_TaskPaused) isScannerToGatewayMessage_Payload() {}

func (*ScannerToGatewayMessage_TaskCancelled) isScannerToGatewayMessage_Payload() {}

func (*ScannerToGatewayMessage_TaskJobMetric) isScannerToGatewayMessage_Payload() {}

func (*ScannerToGatewayMessage_TaskHeartbeat) isScannerToGatewayMessage_Payload() {}

func (*ScannerToGatewayMessage_RuleMessage) isScannerToGatewayMessage_Payload() {}

func (*ScannerToGatewayMessage_Ack) isScannerToGatewayMessage_Payload() {}

// MessageAcknowledgment allows acknowledging receipt of messages with a
// standardized format. This is used for all acknowledgments, including
// registration responses and event acknowledgments.
type MessageAcknowledgment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OriginalMessageId string            `protobuf:"bytes,1,opt,name=original_message_id,json=originalMessageId,proto3" json:"original_message_id,omitempty"`                                            // ID of the message being acknowledged
	Success           bool              `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`                                                                                          // Whether the message was processed successfully
	ErrorMessage      string            `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`                                                             // Error message if success is false
	ScannerId         string            `protobuf:"bytes,4,opt,name=scanner_id,json=scannerId,proto3" json:"scanner_id,omitempty"`                                                                      // Scanner ID (used in registration responses)
	Metadata          map[string]string `protobuf:"bytes,5,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // Additional context-specific metadata
}

func (x *MessageAcknowledgment) Reset() {
	*x = MessageAcknowledgment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageAcknowledgment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageAcknowledgment) ProtoMessage() {}

func (x *MessageAcknowledgment) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageAcknowledgment.ProtoReflect.Descriptor instead.
func (*MessageAcknowledgment) Descriptor() ([]byte, []int) {
	return file_proto_gateway_proto_rawDescGZIP(), []int{1}
}

func (x *MessageAcknowledgment) GetOriginalMessageId() string {
	if x != nil {
		return x.OriginalMessageId
	}
	return ""
}

func (x *MessageAcknowledgment) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *MessageAcknowledgment) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *MessageAcknowledgment) GetScannerId() string {
	if x != nil {
		return x.ScannerId
	}
	return ""
}

func (x *MessageAcknowledgment) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// ScannerRegistrationRequest is sent by a scanner to register with the system
// This is different from ScannerRegisteredEvent as it's the initial request
// before a scanner is officially registered.
type ScannerRegistrationRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScannerName  string            `protobuf:"bytes,1,opt,name=scanner_name,json=scannerName,proto3" json:"scanner_name,omitempty"`
	Version      string            `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Capabilities []string          `protobuf:"bytes,3,rep,name=capabilities,proto3" json:"capabilities,omitempty"`
	GroupName    string            `protobuf:"bytes,4,opt,name=group_name,json=groupName,proto3" json:"group_name,omitempty"`
	Hostname     string            `protobuf:"bytes,5,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Tags         map[string]string `protobuf:"bytes,6,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ScannerRegistrationRequest) Reset() {
	*x = ScannerRegistrationRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScannerRegistrationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScannerRegistrationRequest) ProtoMessage() {}

func (x *ScannerRegistrationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScannerRegistrationRequest.ProtoReflect.Descriptor instead.
func (*ScannerRegistrationRequest) Descriptor() ([]byte, []int) {
	return file_proto_gateway_proto_rawDescGZIP(), []int{2}
}

func (x *ScannerRegistrationRequest) GetScannerName() string {
	if x != nil {
		return x.ScannerName
	}
	return ""
}

func (x *ScannerRegistrationRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ScannerRegistrationRequest) GetCapabilities() []string {
	if x != nil {
		return x.Capabilities
	}
	return nil
}

func (x *ScannerRegistrationRequest) GetGroupName() string {
	if x != nil {
		return x.GroupName
	}
	return ""
}

func (x *ScannerRegistrationRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *ScannerRegistrationRequest) GetTags() map[string]string {
	if x != nil {
		return x.Tags
	}
	return nil
}

// SystemNotification for broadcasting system events to scanners.
type SystemNotification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type      SystemNotification_NotificationType `protobuf:"varint,1,opt,name=type,proto3,enum=scanner.SystemNotification_NotificationType" json:"type,omitempty"`
	Title     string                              `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Message   string                              `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	ExpiresAt int64                               `protobuf:"varint,4,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty"` // When this notification expires (0 = no expiry)
}

func (x *SystemNotification) Reset() {
	*x = SystemNotification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemNotification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemNotification) ProtoMessage() {}

func (x *SystemNotification) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemNotification.ProtoReflect.Descriptor instead.
func (*SystemNotification) Descriptor() ([]byte, []int) {
	return file_proto_gateway_proto_rawDescGZIP(), []int{3}
}

func (x *SystemNotification) GetType() SystemNotification_NotificationType {
	if x != nil {
		return x.Type
	}
	return SystemNotification_NOTIFICATION_TYPE_UNSPECIFIED
}

func (x *SystemNotification) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *SystemNotification) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *SystemNotification) GetExpiresAt() int64 {
	if x != nil {
		return x.ExpiresAt
	}
	return 0
}

// GatewayToScannerMessage is a container for all possible messages the gateway
// can send to a scanner. This wraps domain events to provide metadata for the
// gRPC transport.
//
// Field numbering strategy:
// 1-9:   Common message metadata fields
// 10-19: Registration and scanner control responses
// 20-29: Task related events
// 30-39: Job control events
// 40-49: System messages
// 50-59: Rules-related events
type GatewayToScannerMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for this message.
	MessageId string `protobuf:"bytes,1,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// Timestamp when the message was created (Unix timestamp in nanoseconds).
	Timestamp int64 `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Routing key for the message (used for consistent routing).
	// This ensures messages with the same key are processed by the same consumer.
	RoutingKey string `protobuf:"bytes,3,opt,name=routing_key,json=routingKey,proto3" json:"routing_key,omitempty"`
	// Headers provide additional metadata for the message.
	// These can include tracing IDs, tenant information, etc.
	Headers map[string]string `protobuf:"bytes,4,rep,name=headers,proto3" json:"headers,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// The actual payload containing domain events.
	//
	// Types that are assignable to Payload:
	//
	//	*GatewayToScannerMessage_TaskCreated
	//	*GatewayToScannerMessage_TaskResume
	//	*GatewayToScannerMessage_TaskPaused
	//	*GatewayToScannerMessage_JobPaused
	//	*GatewayToScannerMessage_JobCancelled
	//	*GatewayToScannerMessage_RuleRequested
	//	*GatewayToScannerMessage_Notification
	//	*GatewayToScannerMessage_Ack
	Payload isGatewayToScannerMessage_Payload `protobuf_oneof:"payload"`
}

func (x *GatewayToScannerMessage) Reset() {
	*x = GatewayToScannerMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_gateway_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GatewayToScannerMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GatewayToScannerMessage) ProtoMessage() {}

func (x *GatewayToScannerMessage) ProtoReflect() protoreflect.Message {
	mi := &file_proto_gateway_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GatewayToScannerMessage.ProtoReflect.Descriptor instead.
func (*GatewayToScannerMessage) Descriptor() ([]byte, []int) {
	return file_proto_gateway_proto_rawDescGZIP(), []int{4}
}

func (x *GatewayToScannerMessage) GetMessageId() string {
	if x != nil {
		return x.MessageId
	}
	return ""
}

func (x *GatewayToScannerMessage) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *GatewayToScannerMessage) GetRoutingKey() string {
	if x != nil {
		return x.RoutingKey
	}
	return ""
}

func (x *GatewayToScannerMessage) GetHeaders() map[string]string {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (m *GatewayToScannerMessage) GetPayload() isGatewayToScannerMessage_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *GatewayToScannerMessage) GetTaskCreated() *TaskCreatedEvent {
	if x, ok := x.GetPayload().(*GatewayToScannerMessage_TaskCreated); ok {
		return x.TaskCreated
	}
	return nil
}

func (x *GatewayToScannerMessage) GetTaskResume() *TaskResumeEvent {
	if x, ok := x.GetPayload().(*GatewayToScannerMessage_TaskResume); ok {
		return x.TaskResume
	}
	return nil
}

func (x *GatewayToScannerMessage) GetTaskPaused() *TaskPausedEvent {
	if x, ok := x.GetPayload().(*GatewayToScannerMessage_TaskPaused); ok {
		return x.TaskPaused
	}
	return nil
}

func (x *GatewayToScannerMessage) GetJobPaused() *JobPausedEvent {
	if x, ok := x.GetPayload().(*GatewayToScannerMessage_JobPaused); ok {
		return x.JobPaused
	}
	return nil
}

func (x *GatewayToScannerMessage) GetJobCancelled() *JobCancelledEvent {
	if x, ok := x.GetPayload().(*GatewayToScannerMessage_JobCancelled); ok {
		return x.JobCancelled
	}
	return nil
}

func (x *GatewayToScannerMessage) GetRuleRequested() *RuleRequestedEvent {
	if x, ok := x.GetPayload().(*GatewayToScannerMessage_RuleRequested); ok {
		return x.RuleRequested
	}
	return nil
}

func (x *GatewayToScannerMessage) GetNotification() *SystemNotification {
	if x, ok := x.GetPayload().(*GatewayToScannerMessage_Notification); ok {
		return x.Notification
	}
	return nil
}

func (x *GatewayToScannerMessage) GetAck() *MessageAcknowledgment {
	if x, ok := x.GetPayload().(*GatewayToScannerMessage_Ack); ok {
		return x.Ack
	}
	return nil
}

type isGatewayToScannerMessage_Payload interface {
	isGatewayToScannerMessage_Payload()
}

type GatewayToScannerMessage_TaskCreated struct {
	// Task related events.
	TaskCreated *TaskCreatedEvent `protobuf:"bytes,10,opt,name=task_created,json=taskCreated,proto3,oneof"`
}

type GatewayToScannerMessage_TaskResume struct {
	TaskResume *TaskResumeEvent `protobuf:"bytes,11,opt,name=task_resume,json=taskResume,proto3,oneof"`
}

type GatewayToScannerMessage_TaskPaused struct {
	TaskPaused *TaskPausedEvent `protobuf:"bytes,12,opt,name=task_paused,json=taskPaused,proto3,oneof"`
}

type GatewayToScannerMessage_JobPaused struct {
	// Job control events.
	JobPaused *JobPausedEvent `protobuf:"bytes,20,opt,name=job_paused,json=jobPaused,proto3,oneof"`
}

type GatewayToScannerMessage_JobCancelled struct {
	JobCancelled *JobCancelledEvent `protobuf:"bytes,21,opt,name=job_cancelled,json=jobCancelled,proto3,oneof"`
}

type GatewayToScannerMessage_RuleRequested struct {
	// Rules related events.
	RuleRequested *RuleRequestedEvent `protobuf:"bytes,30,opt,name=rule_requested,json=ruleRequested,proto3,oneof"`
}

type GatewayToScannerMessage_Notification struct {
	// System messages.
	Notification *SystemNotification `protobuf:"bytes,40,opt,name=notification,proto3,oneof"`
}

type GatewayToScannerMessage_Ack struct {
	// Acknowledgments of received messages, including registration responses.
	// For registration responses, the original_message_id will match the
	// registration request message_id, and the scanner_id field will contain
	// the assigned scanner ID.
	Ack *MessageAcknowledgment `protobuf:"bytes,50,opt,name=ack,proto3,oneof"`
}

func (*GatewayToScannerMessage_TaskCreated) isGatewayToScannerMessage_Payload() {}

func (*GatewayToScannerMessage_TaskResume) isGatewayToScannerMessage_Payload() {}

func (*GatewayToScannerMessage_TaskPaused) isGatewayToScannerMessage_Payload() {}

func (*GatewayToScannerMessage_JobPaused) isGatewayToScannerMessage_Payload() {}

func (*GatewayToScannerMessage_JobCancelled) isGatewayToScannerMessage_Payload() {}

func (*GatewayToScannerMessage_RuleRequested) isGatewayToScannerMessage_Payload() {}

func (*GatewayToScannerMessage_Notification) isGatewayToScannerMessage_Payload() {}

func (*GatewayToScannerMessage_Ack) isGatewayToScannerMessage_Payload() {}

var File_proto_gateway_proto protoreflect.FileDescriptor

var file_proto_gateway_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x1a, 0x14,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x72, 0x75, 0x6c, 0x65,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc3, 0x0a, 0x0a, 0x17, 0x53, 0x63, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x74, 0x68, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1f,
	0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x6f, 0x75, 0x74, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12,
	0x47, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x54, 0x6f, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x49, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x72,
	0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x11, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x09, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x68, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x4b, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x12, 0x47, 0x0a, 0x0c, 0x64, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x44, 0x65, 0x72, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x64,
	0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x12, 0x3e, 0x0a, 0x0c, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b,
	0x74, 0x61, 0x73, 0x6b, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x47, 0x0a, 0x0f, 0x74,
	0x61, 0x73, 0x6b, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73,
	0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c,
	0x65, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x61, 0x73,
	0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x46, 0x61,
	0x69, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x61, 0x73,
	0x6b, 0x46, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f,
	0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73,
	0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x75, 0x73, 0x65,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73,
	0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x61, 0x6e, 0x63, 0x65,
	0x6c, 0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x61, 0x73,
	0x6b, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x45, 0x0a, 0x0f, 0x74, 0x61,
	0x73, 0x6b, 0x5f, 0x6a, 0x6f, 0x62, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x4a, 0x6f, 0x62, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x4a, 0x6f, 0x62, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x12, 0x44, 0x0a, 0x0e, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x61, 0x73, 0x6b, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x39, 0x0a, 0x0c, 0x72, 0x75, 0x6c, 0x65, 0x5f,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x75, 0x6c, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x32, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x48,
	0x00, 0x52, 0x03, 0x61, 0x63, 0x6b, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xac, 0x02,
	0x0a, 0x15, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x13, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x61, 0x6c, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x61, 0x6c, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x63, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x49, 0x64, 0x12, 0x48, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c,
	0x65, 0x64, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a,
	0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb4, 0x02, 0x0a,
	0x1a, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73,
	0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x61, 0x70, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c,
	0x63, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e,
	0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x54, 0x61, 0x67, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a, 0x37, 0x0a, 0x09, 0x54, 0x61,
	0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x22, 0xd8, 0x02, 0x0a, 0x12, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x40, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x41, 0x74, 0x22, 0xb0, 0x01, 0x0a, 0x10,
	0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x21, 0x0a, 0x1d, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45,
	0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x49, 0x4e, 0x46, 0x4f, 0x10, 0x01, 0x12,
	0x1d, 0x0a, 0x19, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x57, 0x41, 0x52, 0x4e, 0x49, 0x4e, 0x47, 0x10, 0x02, 0x12, 0x1b,
	0x0a, 0x17, 0x4e, 0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12, 0x21, 0x0a, 0x1d, 0x4e,
	0x4f, 0x54, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45,
	0x5f, 0x4d, 0x41, 0x49, 0x4e, 0x54, 0x45, 0x4e, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x04, 0x22, 0xfb,
	0x05, 0x0a, 0x17, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x54, 0x6f, 0x53, 0x63, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x6f, 0x75, 0x74, 0x69,
	0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x72, 0x6f,
	0x75, 0x74, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x12, 0x47, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x63, 0x61, 0x6e,
	0x6e, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x54, 0x6f, 0x53, 0x63, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x48, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72,
	0x73, 0x12, 0x3e, 0x0a, 0x0c, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65,
	0x72, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72,
	0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x48, 0x00, 0x52, 0x0a, 0x74, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x12, 0x3b,
	0x0a, 0x0b, 0x74, 0x61, 0x73, 0x6b, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0a, 0x74, 0x61, 0x73, 0x6b, 0x50, 0x61, 0x75, 0x73, 0x65, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x6a,
	0x6f, 0x62, 0x5f, 0x70, 0x61, 0x75, 0x73, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x09, 0x6a, 0x6f, 0x62, 0x50,
	0x61, 0x75, 0x73, 0x65, 0x64, 0x12, 0x41, 0x0a, 0x0d, 0x6a, 0x6f, 0x62, 0x5f, 0x63, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73,
	0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x4a, 0x6f, 0x62, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x6c, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x6a, 0x6f, 0x62, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x44, 0x0a, 0x0e, 0x72, 0x75, 0x6c, 0x65,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52,
	0x0d, 0x72, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x65, 0x64, 0x12, 0x41,
	0x0a, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x28,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x4e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x0c, 0x6e, 0x6f, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x32, 0x0a, 0x03, 0x61, 0x63, 0x6b, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x41, 0x63, 0x6b, 0x6e, 0x6f, 0x77, 0x6c, 0x65, 0x64, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00,
	0x52, 0x03, 0x61, 0x63, 0x6b, 0x1a, 0x3a, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38,
	0x01, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x32, 0xd6, 0x01, 0x0a,
	0x15, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x5a, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x20, 0x2e, 0x73, 0x63, 0x61, 0x6e, 0x6e,
	0x65, 0x72, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x6f, 0x47, 0x61, 0x74, 0x65,
	0x77, 0x61, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x20, 0x2e, 0x73, 0x63, 0x61,
	0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x54, 0x6f, 0x53, 0x63,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x00, 0x28, 0x01,
	0x30, 0x01, 0x12, 0x61, 0x0a, 0x15, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54,
	0x6f, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x73, 0x12, 0x20, 0x2e, 0x73, 0x63,
	0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x54, 0x6f, 0x47,
	0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x20, 0x2e,
	0x73, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x2e, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x54,
	0x6f, 0x53, 0x63, 0x61, 0x6e, 0x6e, 0x65, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22,
	0x00, 0x28, 0x01, 0x30, 0x01, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x61, 0x68, 0x72, 0x61, 0x76, 0x2f, 0x67, 0x69, 0x74, 0x6c, 0x65, 0x61,
	0x6b, 0x73, 0x2d, 0x61, 0x72, 0x6d, 0x61, 0x64, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x3b,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_gateway_proto_rawDescOnce sync.Once
	file_proto_gateway_proto_rawDescData = file_proto_gateway_proto_rawDesc
)

func file_proto_gateway_proto_rawDescGZIP() []byte {
	file_proto_gateway_proto_rawDescOnce.Do(func() {
		file_proto_gateway_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_gateway_proto_rawDescData)
	})
	return file_proto_gateway_proto_rawDescData
}

var file_proto_gateway_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_proto_gateway_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_proto_gateway_proto_goTypes = []interface{}{
	(SystemNotification_NotificationType)(0), // 0: scanner.SystemNotification.NotificationType
	(*ScannerToGatewayMessage)(nil),          // 1: scanner.ScannerToGatewayMessage
	(*MessageAcknowledgment)(nil),            // 2: scanner.MessageAcknowledgment
	(*ScannerRegistrationRequest)(nil),       // 3: scanner.ScannerRegistrationRequest
	(*SystemNotification)(nil),               // 4: scanner.SystemNotification
	(*GatewayToScannerMessage)(nil),          // 5: scanner.GatewayToScannerMessage
	nil,                                      // 6: scanner.ScannerToGatewayMessage.HeadersEntry
	nil,                                      // 7: scanner.MessageAcknowledgment.MetadataEntry
	nil,                                      // 8: scanner.ScannerRegistrationRequest.TagsEntry
	nil,                                      // 9: scanner.GatewayToScannerMessage.HeadersEntry
	(*ScannerRegisteredEvent)(nil),           // 10: scanner.ScannerRegisteredEvent
	(*ScannerHeartbeatEvent)(nil),            // 11: scanner.ScannerHeartbeatEvent
	(*ScannerStatusChangedEvent)(nil),        // 12: scanner.ScannerStatusChangedEvent
	(*ScannerDeregisteredEvent)(nil),         // 13: scanner.ScannerDeregisteredEvent
	(*TaskStartedEvent)(nil),                 // 14: scanner.TaskStartedEvent
	(*TaskProgressedEvent)(nil),              // 15: scanner.TaskProgressedEvent
	(*TaskCompletedEvent)(nil),               // 16: scanner.TaskCompletedEvent
	(*TaskFailedEvent)(nil),                  // 17: scanner.TaskFailedEvent
	(*TaskPausedEvent)(nil),                  // 18: scanner.TaskPausedEvent
	(*TaskCancelledEvent)(nil),               // 19: scanner.TaskCancelledEvent
	(*TaskJobMetricEvent)(nil),               // 20: scanner.TaskJobMetricEvent
	(*TaskHeartbeatEvent)(nil),               // 21: scanner.TaskHeartbeatEvent
	(*RuleMessage)(nil),                      // 22: scanner.RuleMessage
	(*TaskCreatedEvent)(nil),                 // 23: scanner.TaskCreatedEvent
	(*TaskResumeEvent)(nil),                  // 24: scanner.TaskResumeEvent
	(*JobPausedEvent)(nil),                   // 25: scanner.JobPausedEvent
	(*JobCancelledEvent)(nil),                // 26: scanner.JobCancelledEvent
	(*RuleRequestedEvent)(nil),               // 27: scanner.RuleRequestedEvent
}
var file_proto_gateway_proto_depIdxs = []int32{
	6,  // 0: scanner.ScannerToGatewayMessage.headers:type_name -> scanner.ScannerToGatewayMessage.HeadersEntry
	3,  // 1: scanner.ScannerToGatewayMessage.registration:type_name -> scanner.ScannerRegistrationRequest
	10, // 2: scanner.ScannerToGatewayMessage.scanner_registered:type_name -> scanner.ScannerRegisteredEvent
	11, // 3: scanner.ScannerToGatewayMessage.heartbeat:type_name -> scanner.ScannerHeartbeatEvent
	12, // 4: scanner.ScannerToGatewayMessage.status_changed:type_name -> scanner.ScannerStatusChangedEvent
	13, // 5: scanner.ScannerToGatewayMessage.deregistered:type_name -> scanner.ScannerDeregisteredEvent
	14, // 6: scanner.ScannerToGatewayMessage.task_started:type_name -> scanner.TaskStartedEvent
	15, // 7: scanner.ScannerToGatewayMessage.task_progressed:type_name -> scanner.TaskProgressedEvent
	16, // 8: scanner.ScannerToGatewayMessage.task_completed:type_name -> scanner.TaskCompletedEvent
	17, // 9: scanner.ScannerToGatewayMessage.task_failed:type_name -> scanner.TaskFailedEvent
	18, // 10: scanner.ScannerToGatewayMessage.task_paused:type_name -> scanner.TaskPausedEvent
	19, // 11: scanner.ScannerToGatewayMessage.task_cancelled:type_name -> scanner.TaskCancelledEvent
	20, // 12: scanner.ScannerToGatewayMessage.task_job_metric:type_name -> scanner.TaskJobMetricEvent
	21, // 13: scanner.ScannerToGatewayMessage.task_heartbeat:type_name -> scanner.TaskHeartbeatEvent
	22, // 14: scanner.ScannerToGatewayMessage.rule_message:type_name -> scanner.RuleMessage
	2,  // 15: scanner.ScannerToGatewayMessage.ack:type_name -> scanner.MessageAcknowledgment
	7,  // 16: scanner.MessageAcknowledgment.metadata:type_name -> scanner.MessageAcknowledgment.MetadataEntry
	8,  // 17: scanner.ScannerRegistrationRequest.tags:type_name -> scanner.ScannerRegistrationRequest.TagsEntry
	0,  // 18: scanner.SystemNotification.type:type_name -> scanner.SystemNotification.NotificationType
	9,  // 19: scanner.GatewayToScannerMessage.headers:type_name -> scanner.GatewayToScannerMessage.HeadersEntry
	23, // 20: scanner.GatewayToScannerMessage.task_created:type_name -> scanner.TaskCreatedEvent
	24, // 21: scanner.GatewayToScannerMessage.task_resume:type_name -> scanner.TaskResumeEvent
	18, // 22: scanner.GatewayToScannerMessage.task_paused:type_name -> scanner.TaskPausedEvent
	25, // 23: scanner.GatewayToScannerMessage.job_paused:type_name -> scanner.JobPausedEvent
	26, // 24: scanner.GatewayToScannerMessage.job_cancelled:type_name -> scanner.JobCancelledEvent
	27, // 25: scanner.GatewayToScannerMessage.rule_requested:type_name -> scanner.RuleRequestedEvent
	4,  // 26: scanner.GatewayToScannerMessage.notification:type_name -> scanner.SystemNotification
	2,  // 27: scanner.GatewayToScannerMessage.ack:type_name -> scanner.MessageAcknowledgment
	1,  // 28: scanner.ScannerGatewayService.ConnectScanner:input_type -> scanner.ScannerToGatewayMessage
	1,  // 29: scanner.ScannerGatewayService.SubscribeToBroadcasts:input_type -> scanner.ScannerToGatewayMessage
	5,  // 30: scanner.ScannerGatewayService.ConnectScanner:output_type -> scanner.GatewayToScannerMessage
	5,  // 31: scanner.ScannerGatewayService.SubscribeToBroadcasts:output_type -> scanner.GatewayToScannerMessage
	30, // [30:32] is the sub-list for method output_type
	28, // [28:30] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_proto_gateway_proto_init() }
func file_proto_gateway_proto_init() {
	if File_proto_gateway_proto != nil {
		return
	}
	file_proto_scanning_proto_init()
	file_proto_rules_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_proto_gateway_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScannerToGatewayMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageAcknowledgment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScannerRegistrationRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemNotification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_gateway_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GatewayToScannerMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_gateway_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*ScannerToGatewayMessage_Registration)(nil),
		(*ScannerToGatewayMessage_ScannerRegistered)(nil),
		(*ScannerToGatewayMessage_Heartbeat)(nil),
		(*ScannerToGatewayMessage_StatusChanged)(nil),
		(*ScannerToGatewayMessage_Deregistered)(nil),
		(*ScannerToGatewayMessage_TaskStarted)(nil),
		(*ScannerToGatewayMessage_TaskProgressed)(nil),
		(*ScannerToGatewayMessage_TaskCompleted)(nil),
		(*ScannerToGatewayMessage_TaskFailed)(nil),
		(*ScannerToGatewayMessage_TaskPaused)(nil),
		(*ScannerToGatewayMessage_TaskCancelled)(nil),
		(*ScannerToGatewayMessage_TaskJobMetric)(nil),
		(*ScannerToGatewayMessage_TaskHeartbeat)(nil),
		(*ScannerToGatewayMessage_RuleMessage)(nil),
		(*ScannerToGatewayMessage_Ack)(nil),
	}
	file_proto_gateway_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*GatewayToScannerMessage_TaskCreated)(nil),
		(*GatewayToScannerMessage_TaskResume)(nil),
		(*GatewayToScannerMessage_TaskPaused)(nil),
		(*GatewayToScannerMessage_JobPaused)(nil),
		(*GatewayToScannerMessage_JobCancelled)(nil),
		(*GatewayToScannerMessage_RuleRequested)(nil),
		(*GatewayToScannerMessage_Notification)(nil),
		(*GatewayToScannerMessage_Ack)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_gateway_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_gateway_proto_goTypes,
		DependencyIndexes: file_proto_gateway_proto_depIdxs,
		EnumInfos:         file_proto_gateway_proto_enumTypes,
		MessageInfos:      file_proto_gateway_proto_msgTypes,
	}.Build()
	File_proto_gateway_proto = out.File
	file_proto_gateway_proto_rawDesc = nil
	file_proto_gateway_proto_goTypes = nil
	file_proto_gateway_proto_depIdxs = nil
}
