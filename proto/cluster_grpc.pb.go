// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.20.3
// source: proto/cluster.proto

package cluster

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ClusterManagementService_ElectLeader_FullMethodName = "/cluster.ClusterManagementService/ElectLeader"
	ClusterManagementService_IsLeader_FullMethodName    = "/cluster.ClusterManagementService/IsLeader"
	ClusterManagementService_GetLeader_FullMethodName   = "/cluster.ClusterManagementService/GetLeader"
)

// ClusterManagementServiceClient is the client API for ClusterManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ClusterManagementServiceClient interface {
	ElectLeader(ctx context.Context, in *ElectLeaderRequest, opts ...grpc.CallOption) (*ElectLeaderResponse, error)
	IsLeader(ctx context.Context, in *IsLeaderRequest, opts ...grpc.CallOption) (*IsLeaderResponse, error)
	GetLeader(ctx context.Context, in *GetLeaderRequest, opts ...grpc.CallOption) (*GetLeaderResponse, error)
}

type clusterManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterManagementServiceClient(cc grpc.ClientConnInterface) ClusterManagementServiceClient {
	return &clusterManagementServiceClient{cc}
}

func (c *clusterManagementServiceClient) ElectLeader(ctx context.Context, in *ElectLeaderRequest, opts ...grpc.CallOption) (*ElectLeaderResponse, error) {
	out := new(ElectLeaderResponse)
	err := c.cc.Invoke(ctx, ClusterManagementService_ElectLeader_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagementServiceClient) IsLeader(ctx context.Context, in *IsLeaderRequest, opts ...grpc.CallOption) (*IsLeaderResponse, error) {
	out := new(IsLeaderResponse)
	err := c.cc.Invoke(ctx, ClusterManagementService_IsLeader_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterManagementServiceClient) GetLeader(ctx context.Context, in *GetLeaderRequest, opts ...grpc.CallOption) (*GetLeaderResponse, error) {
	out := new(GetLeaderResponse)
	err := c.cc.Invoke(ctx, ClusterManagementService_GetLeader_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterManagementServiceServer is the server API for ClusterManagementService service.
// All implementations must embed UnimplementedClusterManagementServiceServer
// for forward compatibility
type ClusterManagementServiceServer interface {
	ElectLeader(context.Context, *ElectLeaderRequest) (*ElectLeaderResponse, error)
	IsLeader(context.Context, *IsLeaderRequest) (*IsLeaderResponse, error)
	GetLeader(context.Context, *GetLeaderRequest) (*GetLeaderResponse, error)
	mustEmbedUnimplementedClusterManagementServiceServer()
}

// UnimplementedClusterManagementServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClusterManagementServiceServer struct {
}

func (UnimplementedClusterManagementServiceServer) ElectLeader(context.Context, *ElectLeaderRequest) (*ElectLeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ElectLeader not implemented")
}
func (UnimplementedClusterManagementServiceServer) IsLeader(context.Context, *IsLeaderRequest) (*IsLeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsLeader not implemented")
}
func (UnimplementedClusterManagementServiceServer) GetLeader(context.Context, *GetLeaderRequest) (*GetLeaderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLeader not implemented")
}
func (UnimplementedClusterManagementServiceServer) mustEmbedUnimplementedClusterManagementServiceServer() {
}

// UnsafeClusterManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterManagementServiceServer will
// result in compilation errors.
type UnsafeClusterManagementServiceServer interface {
	mustEmbedUnimplementedClusterManagementServiceServer()
}

func RegisterClusterManagementServiceServer(s grpc.ServiceRegistrar, srv ClusterManagementServiceServer) {
	s.RegisterService(&ClusterManagementService_ServiceDesc, srv)
}

func _ClusterManagementService_ElectLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ElectLeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagementServiceServer).ElectLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterManagementService_ElectLeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagementServiceServer).ElectLeader(ctx, req.(*ElectLeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManagementService_IsLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsLeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagementServiceServer).IsLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterManagementService_IsLeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagementServiceServer).IsLeader(ctx, req.(*IsLeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterManagementService_GetLeader_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLeaderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterManagementServiceServer).GetLeader(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterManagementService_GetLeader_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterManagementServiceServer).GetLeader(ctx, req.(*GetLeaderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClusterManagementService_ServiceDesc is the grpc.ServiceDesc for ClusterManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClusterManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cluster.ClusterManagementService",
	HandlerType: (*ClusterManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ElectLeader",
			Handler:    _ClusterManagementService_ElectLeader_Handler,
		},
		{
			MethodName: "IsLeader",
			Handler:    _ClusterManagementService_IsLeader_Handler,
		},
		{
			MethodName: "GetLeader",
			Handler:    _ClusterManagementService_GetLeader_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cluster.proto",
}

const (
	NodeRegistryService_RegisterNode_FullMethodName        = "/cluster.NodeRegistryService/RegisterNode"
	NodeRegistryService_UnregisterNode_FullMethodName      = "/cluster.NodeRegistryService/UnregisterNode"
	NodeRegistryService_GetNodes_FullMethodName            = "/cluster.NodeRegistryService/GetNodes"
	NodeRegistryService_ReportHealth_FullMethodName        = "/cluster.NodeRegistryService/ReportHealth"
	NodeRegistryService_GetNodeHealth_FullMethodName       = "/cluster.NodeRegistryService/GetNodeHealth"
	NodeRegistryService_RegisterWorker_FullMethodName      = "/cluster.NodeRegistryService/RegisterWorker"
	NodeRegistryService_UnregisterWorker_FullMethodName    = "/cluster.NodeRegistryService/UnregisterWorker"
	NodeRegistryService_GetAvailableWorkers_FullMethodName = "/cluster.NodeRegistryService/GetAvailableWorkers"
	NodeRegistryService_UpdateWorkerStatus_FullMethodName  = "/cluster.NodeRegistryService/UpdateWorkerStatus"
	NodeRegistryService_GetWorkerStatus_FullMethodName     = "/cluster.NodeRegistryService/GetWorkerStatus"
)

// NodeRegistryServiceClient is the client API for NodeRegistryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeRegistryServiceClient interface {
	RegisterNode(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (*RegisterNodeResponse, error)
	UnregisterNode(ctx context.Context, in *UnregisterNodeRequest, opts ...grpc.CallOption) (*UnregisterNodeResponse, error)
	GetNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (*GetNodesResponse, error)
	ReportHealth(ctx context.Context, in *ReportHealthRequest, opts ...grpc.CallOption) (*ReportHealthResponse, error)
	GetNodeHealth(ctx context.Context, in *GetNodeHealthRequest, opts ...grpc.CallOption) (*GetNodeHealthResponse, error)
	// Similarly, for workers, you could have:
	RegisterWorker(ctx context.Context, in *RegisterWorkerRequest, opts ...grpc.CallOption) (*RegisterWorkerResponse, error)
	UnregisterWorker(ctx context.Context, in *UnregisterWorkerRequest, opts ...grpc.CallOption) (*UnregisterWorkerResponse, error)
	GetAvailableWorkers(ctx context.Context, in *GetAvailableWorkersRequest, opts ...grpc.CallOption) (*GetAvailableWorkersResponse, error)
	UpdateWorkerStatus(ctx context.Context, in *UpdateWorkerStatusRequest, opts ...grpc.CallOption) (*UpdateWorkerStatusResponse, error)
	GetWorkerStatus(ctx context.Context, in *GetWorkerStatusRequest, opts ...grpc.CallOption) (*GetWorkerStatusResponse, error)
}

type nodeRegistryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeRegistryServiceClient(cc grpc.ClientConnInterface) NodeRegistryServiceClient {
	return &nodeRegistryServiceClient{cc}
}

func (c *nodeRegistryServiceClient) RegisterNode(ctx context.Context, in *RegisterNodeRequest, opts ...grpc.CallOption) (*RegisterNodeResponse, error) {
	out := new(RegisterNodeResponse)
	err := c.cc.Invoke(ctx, NodeRegistryService_RegisterNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRegistryServiceClient) UnregisterNode(ctx context.Context, in *UnregisterNodeRequest, opts ...grpc.CallOption) (*UnregisterNodeResponse, error) {
	out := new(UnregisterNodeResponse)
	err := c.cc.Invoke(ctx, NodeRegistryService_UnregisterNode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRegistryServiceClient) GetNodes(ctx context.Context, in *GetNodesRequest, opts ...grpc.CallOption) (*GetNodesResponse, error) {
	out := new(GetNodesResponse)
	err := c.cc.Invoke(ctx, NodeRegistryService_GetNodes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRegistryServiceClient) ReportHealth(ctx context.Context, in *ReportHealthRequest, opts ...grpc.CallOption) (*ReportHealthResponse, error) {
	out := new(ReportHealthResponse)
	err := c.cc.Invoke(ctx, NodeRegistryService_ReportHealth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRegistryServiceClient) GetNodeHealth(ctx context.Context, in *GetNodeHealthRequest, opts ...grpc.CallOption) (*GetNodeHealthResponse, error) {
	out := new(GetNodeHealthResponse)
	err := c.cc.Invoke(ctx, NodeRegistryService_GetNodeHealth_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRegistryServiceClient) RegisterWorker(ctx context.Context, in *RegisterWorkerRequest, opts ...grpc.CallOption) (*RegisterWorkerResponse, error) {
	out := new(RegisterWorkerResponse)
	err := c.cc.Invoke(ctx, NodeRegistryService_RegisterWorker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRegistryServiceClient) UnregisterWorker(ctx context.Context, in *UnregisterWorkerRequest, opts ...grpc.CallOption) (*UnregisterWorkerResponse, error) {
	out := new(UnregisterWorkerResponse)
	err := c.cc.Invoke(ctx, NodeRegistryService_UnregisterWorker_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRegistryServiceClient) GetAvailableWorkers(ctx context.Context, in *GetAvailableWorkersRequest, opts ...grpc.CallOption) (*GetAvailableWorkersResponse, error) {
	out := new(GetAvailableWorkersResponse)
	err := c.cc.Invoke(ctx, NodeRegistryService_GetAvailableWorkers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRegistryServiceClient) UpdateWorkerStatus(ctx context.Context, in *UpdateWorkerStatusRequest, opts ...grpc.CallOption) (*UpdateWorkerStatusResponse, error) {
	out := new(UpdateWorkerStatusResponse)
	err := c.cc.Invoke(ctx, NodeRegistryService_UpdateWorkerStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeRegistryServiceClient) GetWorkerStatus(ctx context.Context, in *GetWorkerStatusRequest, opts ...grpc.CallOption) (*GetWorkerStatusResponse, error) {
	out := new(GetWorkerStatusResponse)
	err := c.cc.Invoke(ctx, NodeRegistryService_GetWorkerStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeRegistryServiceServer is the server API for NodeRegistryService service.
// All implementations must embed UnimplementedNodeRegistryServiceServer
// for forward compatibility
type NodeRegistryServiceServer interface {
	RegisterNode(context.Context, *RegisterNodeRequest) (*RegisterNodeResponse, error)
	UnregisterNode(context.Context, *UnregisterNodeRequest) (*UnregisterNodeResponse, error)
	GetNodes(context.Context, *GetNodesRequest) (*GetNodesResponse, error)
	ReportHealth(context.Context, *ReportHealthRequest) (*ReportHealthResponse, error)
	GetNodeHealth(context.Context, *GetNodeHealthRequest) (*GetNodeHealthResponse, error)
	// Similarly, for workers, you could have:
	RegisterWorker(context.Context, *RegisterWorkerRequest) (*RegisterWorkerResponse, error)
	UnregisterWorker(context.Context, *UnregisterWorkerRequest) (*UnregisterWorkerResponse, error)
	GetAvailableWorkers(context.Context, *GetAvailableWorkersRequest) (*GetAvailableWorkersResponse, error)
	UpdateWorkerStatus(context.Context, *UpdateWorkerStatusRequest) (*UpdateWorkerStatusResponse, error)
	GetWorkerStatus(context.Context, *GetWorkerStatusRequest) (*GetWorkerStatusResponse, error)
	mustEmbedUnimplementedNodeRegistryServiceServer()
}

// UnimplementedNodeRegistryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedNodeRegistryServiceServer struct {
}

func (UnimplementedNodeRegistryServiceServer) RegisterNode(context.Context, *RegisterNodeRequest) (*RegisterNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterNode not implemented")
}
func (UnimplementedNodeRegistryServiceServer) UnregisterNode(context.Context, *UnregisterNodeRequest) (*UnregisterNodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterNode not implemented")
}
func (UnimplementedNodeRegistryServiceServer) GetNodes(context.Context, *GetNodesRequest) (*GetNodesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodes not implemented")
}
func (UnimplementedNodeRegistryServiceServer) ReportHealth(context.Context, *ReportHealthRequest) (*ReportHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportHealth not implemented")
}
func (UnimplementedNodeRegistryServiceServer) GetNodeHealth(context.Context, *GetNodeHealthRequest) (*GetNodeHealthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodeHealth not implemented")
}
func (UnimplementedNodeRegistryServiceServer) RegisterWorker(context.Context, *RegisterWorkerRequest) (*RegisterWorkerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterWorker not implemented")
}
func (UnimplementedNodeRegistryServiceServer) UnregisterWorker(context.Context, *UnregisterWorkerRequest) (*UnregisterWorkerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterWorker not implemented")
}
func (UnimplementedNodeRegistryServiceServer) GetAvailableWorkers(context.Context, *GetAvailableWorkersRequest) (*GetAvailableWorkersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAvailableWorkers not implemented")
}
func (UnimplementedNodeRegistryServiceServer) UpdateWorkerStatus(context.Context, *UpdateWorkerStatusRequest) (*UpdateWorkerStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateWorkerStatus not implemented")
}
func (UnimplementedNodeRegistryServiceServer) GetWorkerStatus(context.Context, *GetWorkerStatusRequest) (*GetWorkerStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkerStatus not implemented")
}
func (UnimplementedNodeRegistryServiceServer) mustEmbedUnimplementedNodeRegistryServiceServer() {}

// UnsafeNodeRegistryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeRegistryServiceServer will
// result in compilation errors.
type UnsafeNodeRegistryServiceServer interface {
	mustEmbedUnimplementedNodeRegistryServiceServer()
}

func RegisterNodeRegistryServiceServer(s grpc.ServiceRegistrar, srv NodeRegistryServiceServer) {
	s.RegisterService(&NodeRegistryService_ServiceDesc, srv)
}

func _NodeRegistryService_RegisterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRegistryServiceServer).RegisterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeRegistryService_RegisterNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRegistryServiceServer).RegisterNode(ctx, req.(*RegisterNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRegistryService_UnregisterNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterNodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRegistryServiceServer).UnregisterNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeRegistryService_UnregisterNode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRegistryServiceServer).UnregisterNode(ctx, req.(*UnregisterNodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRegistryService_GetNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRegistryServiceServer).GetNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeRegistryService_GetNodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRegistryServiceServer).GetNodes(ctx, req.(*GetNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRegistryService_ReportHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRegistryServiceServer).ReportHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeRegistryService_ReportHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRegistryServiceServer).ReportHealth(ctx, req.(*ReportHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRegistryService_GetNodeHealth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNodeHealthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRegistryServiceServer).GetNodeHealth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeRegistryService_GetNodeHealth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRegistryServiceServer).GetNodeHealth(ctx, req.(*GetNodeHealthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRegistryService_RegisterWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRegistryServiceServer).RegisterWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeRegistryService_RegisterWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRegistryServiceServer).RegisterWorker(ctx, req.(*RegisterWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRegistryService_UnregisterWorker_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterWorkerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRegistryServiceServer).UnregisterWorker(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeRegistryService_UnregisterWorker_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRegistryServiceServer).UnregisterWorker(ctx, req.(*UnregisterWorkerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRegistryService_GetAvailableWorkers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAvailableWorkersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRegistryServiceServer).GetAvailableWorkers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeRegistryService_GetAvailableWorkers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRegistryServiceServer).GetAvailableWorkers(ctx, req.(*GetAvailableWorkersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRegistryService_UpdateWorkerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateWorkerStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRegistryServiceServer).UpdateWorkerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeRegistryService_UpdateWorkerStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRegistryServiceServer).UpdateWorkerStatus(ctx, req.(*UpdateWorkerStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeRegistryService_GetWorkerStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWorkerStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeRegistryServiceServer).GetWorkerStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NodeRegistryService_GetWorkerStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeRegistryServiceServer).GetWorkerStatus(ctx, req.(*GetWorkerStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeRegistryService_ServiceDesc is the grpc.ServiceDesc for NodeRegistryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeRegistryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cluster.NodeRegistryService",
	HandlerType: (*NodeRegistryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterNode",
			Handler:    _NodeRegistryService_RegisterNode_Handler,
		},
		{
			MethodName: "UnregisterNode",
			Handler:    _NodeRegistryService_UnregisterNode_Handler,
		},
		{
			MethodName: "GetNodes",
			Handler:    _NodeRegistryService_GetNodes_Handler,
		},
		{
			MethodName: "ReportHealth",
			Handler:    _NodeRegistryService_ReportHealth_Handler,
		},
		{
			MethodName: "GetNodeHealth",
			Handler:    _NodeRegistryService_GetNodeHealth_Handler,
		},
		{
			MethodName: "RegisterWorker",
			Handler:    _NodeRegistryService_RegisterWorker_Handler,
		},
		{
			MethodName: "UnregisterWorker",
			Handler:    _NodeRegistryService_UnregisterWorker_Handler,
		},
		{
			MethodName: "GetAvailableWorkers",
			Handler:    _NodeRegistryService_GetAvailableWorkers_Handler,
		},
		{
			MethodName: "UpdateWorkerStatus",
			Handler:    _NodeRegistryService_UpdateWorkerStatus_Handler,
		},
		{
			MethodName: "GetWorkerStatus",
			Handler:    _NodeRegistryService_GetWorkerStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cluster.proto",
}

const (
	StorageService_SaveTask_FullMethodName     = "/cluster.StorageService/SaveTask"
	StorageService_GetTask_FullMethodName      = "/cluster.StorageService/GetTask"
	StorageService_ListTasks_FullMethodName    = "/cluster.StorageService/ListTasks"
	StorageService_SaveFindings_FullMethodName = "/cluster.StorageService/SaveFindings"
	StorageService_GetFindings_FullMethodName  = "/cluster.StorageService/GetFindings"
	StorageService_SaveState_FullMethodName    = "/cluster.StorageService/SaveState"
	StorageService_GetState_FullMethodName     = "/cluster.StorageService/GetState"
)

// StorageServiceClient is the client API for StorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageServiceClient interface {
	// Task management
	SaveTask(ctx context.Context, in *SaveTaskRequest, opts ...grpc.CallOption) (*SaveTaskResponse, error)
	GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error)
	ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksResponse, error)
	// Results management
	SaveFindings(ctx context.Context, in *SaveFindingsRequest, opts ...grpc.CallOption) (*SaveFindingsResponse, error)
	GetFindings(ctx context.Context, in *GetFindingsRequest, opts ...grpc.CallOption) (*GetFindingsResponse, error)
	// State management (for arbitrary key-value state)
	SaveState(ctx context.Context, in *SaveStateRequest, opts ...grpc.CallOption) (*SaveStateResponse, error)
	GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error)
}

type storageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageServiceClient(cc grpc.ClientConnInterface) StorageServiceClient {
	return &storageServiceClient{cc}
}

func (c *storageServiceClient) SaveTask(ctx context.Context, in *SaveTaskRequest, opts ...grpc.CallOption) (*SaveTaskResponse, error) {
	out := new(SaveTaskResponse)
	err := c.cc.Invoke(ctx, StorageService_SaveTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetTask(ctx context.Context, in *GetTaskRequest, opts ...grpc.CallOption) (*GetTaskResponse, error) {
	out := new(GetTaskResponse)
	err := c.cc.Invoke(ctx, StorageService_GetTask_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) ListTasks(ctx context.Context, in *ListTasksRequest, opts ...grpc.CallOption) (*ListTasksResponse, error) {
	out := new(ListTasksResponse)
	err := c.cc.Invoke(ctx, StorageService_ListTasks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) SaveFindings(ctx context.Context, in *SaveFindingsRequest, opts ...grpc.CallOption) (*SaveFindingsResponse, error) {
	out := new(SaveFindingsResponse)
	err := c.cc.Invoke(ctx, StorageService_SaveFindings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetFindings(ctx context.Context, in *GetFindingsRequest, opts ...grpc.CallOption) (*GetFindingsResponse, error) {
	out := new(GetFindingsResponse)
	err := c.cc.Invoke(ctx, StorageService_GetFindings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) SaveState(ctx context.Context, in *SaveStateRequest, opts ...grpc.CallOption) (*SaveStateResponse, error) {
	out := new(SaveStateResponse)
	err := c.cc.Invoke(ctx, StorageService_SaveState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storageServiceClient) GetState(ctx context.Context, in *GetStateRequest, opts ...grpc.CallOption) (*GetStateResponse, error) {
	out := new(GetStateResponse)
	err := c.cc.Invoke(ctx, StorageService_GetState_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageServiceServer is the server API for StorageService service.
// All implementations must embed UnimplementedStorageServiceServer
// for forward compatibility
type StorageServiceServer interface {
	// Task management
	SaveTask(context.Context, *SaveTaskRequest) (*SaveTaskResponse, error)
	GetTask(context.Context, *GetTaskRequest) (*GetTaskResponse, error)
	ListTasks(context.Context, *ListTasksRequest) (*ListTasksResponse, error)
	// Results management
	SaveFindings(context.Context, *SaveFindingsRequest) (*SaveFindingsResponse, error)
	GetFindings(context.Context, *GetFindingsRequest) (*GetFindingsResponse, error)
	// State management (for arbitrary key-value state)
	SaveState(context.Context, *SaveStateRequest) (*SaveStateResponse, error)
	GetState(context.Context, *GetStateRequest) (*GetStateResponse, error)
	mustEmbedUnimplementedStorageServiceServer()
}

// UnimplementedStorageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStorageServiceServer struct {
}

func (UnimplementedStorageServiceServer) SaveTask(context.Context, *SaveTaskRequest) (*SaveTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveTask not implemented")
}
func (UnimplementedStorageServiceServer) GetTask(context.Context, *GetTaskRequest) (*GetTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTask not implemented")
}
func (UnimplementedStorageServiceServer) ListTasks(context.Context, *ListTasksRequest) (*ListTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTasks not implemented")
}
func (UnimplementedStorageServiceServer) SaveFindings(context.Context, *SaveFindingsRequest) (*SaveFindingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveFindings not implemented")
}
func (UnimplementedStorageServiceServer) GetFindings(context.Context, *GetFindingsRequest) (*GetFindingsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFindings not implemented")
}
func (UnimplementedStorageServiceServer) SaveState(context.Context, *SaveStateRequest) (*SaveStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveState not implemented")
}
func (UnimplementedStorageServiceServer) GetState(context.Context, *GetStateRequest) (*GetStateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetState not implemented")
}
func (UnimplementedStorageServiceServer) mustEmbedUnimplementedStorageServiceServer() {}

// UnsafeStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageServiceServer will
// result in compilation errors.
type UnsafeStorageServiceServer interface {
	mustEmbedUnimplementedStorageServiceServer()
}

func RegisterStorageServiceServer(s grpc.ServiceRegistrar, srv StorageServiceServer) {
	s.RegisterService(&StorageService_ServiceDesc, srv)
}

func _StorageService_SaveTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).SaveTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_SaveTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).SaveTask(ctx, req.(*SaveTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_GetTask_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetTask(ctx, req.(*GetTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_ListTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).ListTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_ListTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).ListTasks(ctx, req.(*ListTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_SaveFindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveFindingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).SaveFindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_SaveFindings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).SaveFindings(ctx, req.(*SaveFindingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetFindings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFindingsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetFindings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_GetFindings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetFindings(ctx, req.(*GetFindingsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_SaveState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).SaveState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_SaveState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).SaveState(ctx, req.(*SaveStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StorageService_GetState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).GetState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_GetState_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).GetState(ctx, req.(*GetStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageService_ServiceDesc is the grpc.ServiceDesc for StorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cluster.StorageService",
	HandlerType: (*StorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveTask",
			Handler:    _StorageService_SaveTask_Handler,
		},
		{
			MethodName: "GetTask",
			Handler:    _StorageService_GetTask_Handler,
		},
		{
			MethodName: "ListTasks",
			Handler:    _StorageService_ListTasks_Handler,
		},
		{
			MethodName: "SaveFindings",
			Handler:    _StorageService_SaveFindings_Handler,
		},
		{
			MethodName: "GetFindings",
			Handler:    _StorageService_GetFindings_Handler,
		},
		{
			MethodName: "SaveState",
			Handler:    _StorageService_SaveState_Handler,
		},
		{
			MethodName: "GetState",
			Handler:    _StorageService_GetState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cluster.proto",
}
