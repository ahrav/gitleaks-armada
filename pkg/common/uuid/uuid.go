package uuid

import (
	"github.com/google/uuid"
)

// Version represents the UUID version to use.
type Version int

const (
	// V4 represents UUID version 4 (random).
	V4 Version = 4
	// V7 represents UUID version 7 (time-ordered).
	V7 Version = 7
)

// defaultVersion controls which UUID version is generated by default.
// This can be modified during app initialization if needed.
var defaultVersion = V7

// UUID is a type alias for github.com/google/uuid.UUID
// This ensures all methods (String(), MarshalText(), etc.) are available.
type UUID = uuid.UUID

// New generates a new UUID according to the DefaultVersion setting.
// This matches the signature of uuid.New() so it can be a drop-in replacement.
func New() UUID {
	if defaultVersion == V7 {
		id, err := uuid.NewV7()
		if err != nil {
			// Fallback to v4 if v7 fails for any reason.
			return uuid.New()
		}
		return id
	}
	return uuid.New()
}

// MustNew7 generates a v7 UUID or panics if it cannot.
func MustNew7() UUID {
	id, err := uuid.NewV7()
	if err != nil {
		panic("failed to generate UUID v7: " + err.Error())
	}
	return id
}

// Parse parses a UUID string into a UUID object.
func Parse(s string) (UUID, error) { return uuid.Parse(s) }

// MustParse parses a UUID string or panics if it cannot.
func MustParse(s string) UUID { return uuid.MustParse(s) }

// Nil returns a nil UUID (all zeros).
func Nil() UUID { return uuid.Nil }
