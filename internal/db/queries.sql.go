// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"
)

const createOrUpdateCheckpoint = `-- name: CreateOrUpdateCheckpoint :one

INSERT INTO checkpoints (target_id, data, created_at, updated_at)
VALUES ($1, $2, NOW(), NOW())
ON CONFLICT (target_id) DO UPDATE
    SET data = EXCLUDED.data,
        updated_at = NOW()
RETURNING id
`

type CreateOrUpdateCheckpointParams struct {
	TargetID string
	Data     json.RawMessage
}

// queries.sql
// ============================================
// Checkpoints
// ============================================
func (q *Queries) CreateOrUpdateCheckpoint(ctx context.Context, arg CreateOrUpdateCheckpointParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, createOrUpdateCheckpoint, arg.TargetID, arg.Data)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createOrUpdateEnumerationState = `-- name: CreateOrUpdateEnumerationState :exec
INSERT INTO enumeration_states (
    session_id, source_type, config, last_checkpoint_id, status
) VALUES (
    $1, $2, $3, $4, $5
)
ON CONFLICT (session_id) DO UPDATE
SET source_type        = EXCLUDED.source_type,
    config             = EXCLUDED.config,
    last_checkpoint_id = EXCLUDED.last_checkpoint_id,
    status             = EXCLUDED.status,
    updated_at         = NOW()
`

type CreateOrUpdateEnumerationStateParams struct {
	SessionID        string
	SourceType       string
	Config           json.RawMessage
	LastCheckpointID sql.NullInt64
	Status           EnumerationStatus
}

// ============================================
// Enumeration States
// ============================================
func (q *Queries) CreateOrUpdateEnumerationState(ctx context.Context, arg CreateOrUpdateEnumerationStateParams) error {
	_, err := q.db.ExecContext(ctx, createOrUpdateEnumerationState,
		arg.SessionID,
		arg.SourceType,
		arg.Config,
		arg.LastCheckpointID,
		arg.Status,
	)
	return err
}

const deleteCheckpoint = `-- name: DeleteCheckpoint :exec
DELETE FROM checkpoints
WHERE target_id = $1
`

func (q *Queries) DeleteCheckpoint(ctx context.Context, targetID string) error {
	_, err := q.db.ExecContext(ctx, deleteCheckpoint, targetID)
	return err
}

const deleteEnumerationState = `-- name: DeleteEnumerationState :exec
DELETE FROM enumeration_states
WHERE session_id = $1
`

func (q *Queries) DeleteEnumerationState(ctx context.Context, sessionID string) error {
	_, err := q.db.ExecContext(ctx, deleteEnumerationState, sessionID)
	return err
}

const getActiveEnumerationStates = `-- name: GetActiveEnumerationStates :many
SELECT id, session_id, source_type, config, last_checkpoint_id,
       status, created_at, updated_at
FROM enumeration_states
WHERE status IN ('initialized', 'in_progress')
ORDER BY created_at DESC
`

func (q *Queries) GetActiveEnumerationStates(ctx context.Context) ([]EnumerationState, error) {
	rows, err := q.db.QueryContext(ctx, getActiveEnumerationStates)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EnumerationState
	for rows.Next() {
		var i EnumerationState
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.SourceType,
			&i.Config,
			&i.LastCheckpointID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCheckpoint = `-- name: GetCheckpoint :one
SELECT id, target_id, data, created_at, updated_at
FROM checkpoints
WHERE target_id = $1
`

func (q *Queries) GetCheckpoint(ctx context.Context, targetID string) (Checkpoint, error) {
	row := q.db.QueryRowContext(ctx, getCheckpoint, targetID)
	var i Checkpoint
	err := row.Scan(
		&i.ID,
		&i.TargetID,
		&i.Data,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCheckpointByID = `-- name: GetCheckpointByID :one
SELECT id, target_id, data, created_at, updated_at
FROM checkpoints
WHERE id = $1
`

func (q *Queries) GetCheckpointByID(ctx context.Context, id int64) (Checkpoint, error) {
	row := q.db.QueryRowContext(ctx, getCheckpointByID, id)
	var i Checkpoint
	err := row.Scan(
		&i.ID,
		&i.TargetID,
		&i.Data,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getEnumerationState = `-- name: GetEnumerationState :one
SELECT id, session_id, source_type, config, last_checkpoint_id,
       status, created_at, updated_at
FROM enumeration_states
WHERE session_id = $1
`

func (q *Queries) GetEnumerationState(ctx context.Context, sessionID string) (EnumerationState, error) {
	row := q.db.QueryRowContext(ctx, getEnumerationState, sessionID)
	var i EnumerationState
	err := row.Scan(
		&i.ID,
		&i.SessionID,
		&i.SourceType,
		&i.Config,
		&i.LastCheckpointID,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listEnumerationStates = `-- name: ListEnumerationStates :many
SELECT id, session_id, source_type, config, last_checkpoint_id,
       status, created_at, updated_at
FROM enumeration_states
ORDER BY created_at DESC
LIMIT $1
`

func (q *Queries) ListEnumerationStates(ctx context.Context, limit int32) ([]EnumerationState, error) {
	rows, err := q.db.QueryContext(ctx, listEnumerationStates, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EnumerationState
	for rows.Next() {
		var i EnumerationState
		if err := rows.Scan(
			&i.ID,
			&i.SessionID,
			&i.SourceType,
			&i.Config,
			&i.LastCheckpointID,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
