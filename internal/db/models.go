// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type BatchStatus string

const (
	BatchStatusSucceeded BatchStatus = "succeeded"
	BatchStatusFailed    BatchStatus = "failed"
	BatchStatusPartial   BatchStatus = "partial"
)

func (e *BatchStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = BatchStatus(s)
	case string:
		*e = BatchStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for BatchStatus: %T", src)
	}
	return nil
}

type NullBatchStatus struct {
	BatchStatus BatchStatus
	Valid       bool // Valid is true if BatchStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullBatchStatus) Scan(value interface{}) error {
	if value == nil {
		ns.BatchStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.BatchStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullBatchStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.BatchStatus), nil
}

type EnumerationStatus string

const (
	EnumerationStatusInitialized        EnumerationStatus = "initialized"
	EnumerationStatusInProgress         EnumerationStatus = "in_progress"
	EnumerationStatusCompleted          EnumerationStatus = "completed"
	EnumerationStatusFailed             EnumerationStatus = "failed"
	EnumerationStatusStalled            EnumerationStatus = "stalled"
	EnumerationStatusPartiallyCompleted EnumerationStatus = "partially_completed"
)

func (e *EnumerationStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = EnumerationStatus(s)
	case string:
		*e = EnumerationStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for EnumerationStatus: %T", src)
	}
	return nil
}

type NullEnumerationStatus struct {
	EnumerationStatus EnumerationStatus
	Valid             bool // Valid is true if EnumerationStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullEnumerationStatus) Scan(value interface{}) error {
	if value == nil {
		ns.EnumerationStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.EnumerationStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullEnumerationStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.EnumerationStatus), nil
}

type ScanJobStatus string

const (
	ScanJobStatusQueued    ScanJobStatus = "queued"
	ScanJobStatusRunning   ScanJobStatus = "running"
	ScanJobStatusCompleted ScanJobStatus = "completed"
	ScanJobStatusFailed    ScanJobStatus = "failed"
)

func (e *ScanJobStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = ScanJobStatus(s)
	case string:
		*e = ScanJobStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for ScanJobStatus: %T", src)
	}
	return nil
}

type NullScanJobStatus struct {
	ScanJobStatus ScanJobStatus
	Valid         bool // Valid is true if ScanJobStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullScanJobStatus) Scan(value interface{}) error {
	if value == nil {
		ns.ScanJobStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.ScanJobStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullScanJobStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.ScanJobStatus), nil
}

type Allowlist struct {
	ID             int64
	RuleID         int64
	Description    pgtype.Text
	MatchCondition string
	RegexTarget    pgtype.Text
	CreatedAt      pgtype.Timestamptz
	UpdatedAt      pgtype.Timestamptz
}

type AllowlistCommit struct {
	ID          int64
	AllowlistID int64
	Commit      string
	CreatedAt   pgtype.Timestamptz
}

type AllowlistPath struct {
	ID          int64
	AllowlistID int64
	Path        string
	CreatedAt   pgtype.Timestamptz
}

type AllowlistRegex struct {
	ID          int64
	AllowlistID int64
	Regex       string
	CreatedAt   pgtype.Timestamptz
}

type AllowlistStopword struct {
	ID          int64
	AllowlistID int64
	Stopword    string
	CreatedAt   pgtype.Timestamptz
}

type Checkpoint struct {
	ID        int64
	TargetID  string
	Data      []byte
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

type EnumerationBatchProgress struct {
	ID             int64
	BatchID        string
	SessionID      string
	Status         BatchStatus
	StartedAt      pgtype.Timestamptz
	CompletedAt    pgtype.Timestamptz
	ItemsProcessed int32
	ErrorDetails   pgtype.Text
	CheckpointID   pgtype.Int8
	CreatedAt      pgtype.Timestamptz
}

type EnumerationProgress struct {
	ID             int64
	SessionID      string
	StartedAt      pgtype.Timestamptz
	ItemsFound     int32
	ItemsProcessed int32
	FailedBatches  int32
	TotalBatches   int32
	CreatedAt      pgtype.Timestamptz
	UpdatedAt      pgtype.Timestamptz
}

type EnumerationSessionState struct {
	ID               int64
	SessionID        string
	SourceType       string
	Config           []byte
	LastCheckpointID pgtype.Int8
	Status           EnumerationStatus
	FailureReason    pgtype.Text
	CreatedAt        pgtype.Timestamptz
	UpdatedAt        pgtype.Timestamptz
}

type Finding struct {
	ID           int64
	ScanJobID    int64
	RuleID       int64
	ScanTargetID int64
	Fingerprint  string
	FilePath     pgtype.Text
	LineNumber   pgtype.Int4
	Line         pgtype.Text
	Match        pgtype.Text
	AuthorEmail  pgtype.Text
	RawFinding   []byte
	CreatedAt    pgtype.Timestamptz
}

type GithubRepository struct {
	ID        int64
	Name      string
	Url       string
	IsActive  bool
	Metadata  []byte
	CreatedAt pgtype.Timestamptz
	UpdatedAt pgtype.Timestamptz
}

type Rule struct {
	ID          int64
	RuleID      string
	Description pgtype.Text
	Entropy     pgtype.Float8
	SecretGroup pgtype.Int4
	Regex       string
	Path        pgtype.Text
	Tags        []string
	Keywords    []string
	CreatedAt   pgtype.Timestamptz
	UpdatedAt   pgtype.Timestamptz
}

type ScanJob struct {
	ID           int64
	ScanTargetID int64
	Status       ScanJobStatus
	StartTime    pgtype.Timestamptz
	EndTime      pgtype.Timestamptz
	CommitHash   pgtype.Text
	KafkaOffset  pgtype.Int8
	CreatedAt    pgtype.Timestamptz
	UpdatedAt    pgtype.Timestamptz
}

type ScanTarget struct {
	ID           int64
	TargetType   string
	TargetID     int64
	LastScanTime pgtype.Timestamptz
	Metadata     []byte
	CreatedAt    pgtype.Timestamptz
	UpdatedAt    pgtype.Timestamptz
}
